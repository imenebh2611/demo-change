# This is a basic workflow to help you get started with Actions

name: deploy to snowflake

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4  # Mise à jour vers la dernière version
   
      - name: Set up Python
        uses: actions/setup-python@v4  # Mise à jour vers la dernière version
        with:
          python-version: '3.9'  # Spécifiez la version de Python

      - name: Force Node.js 20
        run: echo "Forcing Node.js 20"  # Ajout d'une étape avec 'run' pour forcer Node.js 20
        env:
          FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

      # Runs a single command using the runners shell
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install SnowCLI
        run: |
          echo "Downloading SnowCLI..."
          
          # Récupérer la dernière version de SnowCLI depuis l'API GitHub
          LATEST_URL=$(curl -s https://api.github.com/repos/snowflakedb/snowcli/releases/latest | grep 'browser_download_url' | grep 'linux_amd64' | cut -d '"' -f 4)

          echo "Downloading from: $LATEST_URL"
          curl -L -o snowcli.tar.gz $LATEST_URL

          # Vérifie si le fichier a été téléchargé avec succès
          if [[ ! -f "snowcli.tar.gz" ]]; then
              echo "Failed to download SnowCLI!"
              exit 1
          fi

          # Vérifie que le fichier est bien au format gzip
          echo "Downloaded file type:"
          file snowcli.tar.gz

          if file snowcli.tar.gz | grep -q 'gzip compressed data'; then
              echo "Extracting SnowCLI..."
              tar -xzf snowcli.tar.gz -C /usr/local/bin --strip-components=1
          else
              echo "Downloaded file is not in gzip format!"
              exit 1
          fi

          # Vérifie si SnowCLI a bien été installé
          if ! command -v snow &> /dev/null; then
              echo "SnowCLI installation failed!"
              exit 1
          fi

          echo "SnowCLI installed successfully!"
      # Runs a set of commands using the runners shell
      - name: Configure SnowCLI
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}  # Optional
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }} 
        run: |
          snow sql -q "ALTER GIT REPOSITORY IBH_REPO FETCH"  
          snow sql  -q "EXECUTE IMMEDIATE FROM @IBH_REPO/branches/main/snowflake_objects/deploy_object.sql" 